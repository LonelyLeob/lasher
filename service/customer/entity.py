#file to describe handlers
from aiogram import types, Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from adadb import UserRepos, ScheduleRepos
from utils.fsm import GuestState
from utils.funcs import generate_random_string, unix_to_normalize
from service.customer.markup import ClientMarkup, ContactsMarkup

class Client():
    def __init__(self, driver, bot: Bot, admin):
        self.user = UserRepos(driver)
        self.order = ScheduleRepos(driver)
        self.bot = bot
        self.admin = admin
        self.markup = ClientMarkup().register()
        self.contacts = ContactsMarkup().register()

    async def preset_user(self, message: types.Message, state: FSMContext):
        whoer = message.from_user
        code = generate_random_string(8)
        async with state.proxy() as data:
            if message.text == "/cancel":
                await self.bot.send_message(whoer.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å:)", reply_markup=self.markup)
                await state.finish()
                return
            data[whoer.id] = message.text
        try:
            self.user.create_user(whoer.id, whoer.first_name, whoer.last_name, code)
            await self.bot.send_message(whoer.id,f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n NOTE: –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å–∫–∏–¥–∫—É! –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–æ–º –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ", reply_markup=ClientMarkup().register())
            await self.bot.send_message(self.admin, f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {whoer.full_name} —Å id {whoer.id}")
        except Exception:
            await self.bot.send_message(whoer.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —Ä–µ—Å–Ω–∏—á–µ–∫;)", reply_markup=self.markup)
            await self.bot.send_message(self.admin, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–Ω–µ–π–º–æ–º {whoer.full_name} –∏ id {whoer.id} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ!")
        await state.finish()

    async def contactmarkup(self, message: types.Message):
        whoer = message.from_user
        await self.bot.send_message(whoer.id, f"–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n+79534677673 - WhatsApp", reply_markup=self.contacts)

    async def profile(self, message: types.Message):
        whoer = message.from_user
        profile = self.user.profile(whoer.id)
        await self.bot.send_message(whoer.id, f"üë§–ü—Ä–æ—Ñ–∏–ª—å\n–í–∞—à–µ –∏–º—è: {profile[1]}\n–ó–∞–ø–∏—Å–µ–π —Å–¥–µ–ª–∞–Ω–æ: 0\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {profile[3]}\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π: {profile[4]}", reply_markup=self.markup)

    def register_handlers_client(self, dp:Dispatcher):
        dp.register_message_handler(self.preset_user,state=GuestState().reffer_code)
        dp.register_callback_query_handler(self.contactmarkup, text="contacts")
        # dp.register_callback_query_handler(self.schedule, text="schedule")
        dp.register_callback_query_handler(self.profile, text="profile")